{"version":3,"sources":["fakeBD.ts","redux/actions.ts","lang/index.ts","lang/ru.ts","lang/de.ts","components/Auth/index.tsx","constants/rootUrl.ts","constants/fieldNames.ts","constants/selectValues.ts","redux/reducers.ts","components/DeliveryForm/index.tsx","components/LeftMenu/index.tsx","redux/index.ts","index.tsx"],"names":["fakeBD","customers","customerNumber","phoneNumber","deliveryCost","name","street","houseNumber","plz","city","formDataActions","langMap","authTitle","organizationNumber","username","password","autoLogin","login","tableOrders","selfPickUp","sales","phoneMonitor","clientComment","clear","goToOrder","logout","callForm","allOrders","cookingMonitor","carMonitor","report","settings","help","Title","Typography","Auth","connect","state","lang","languages","code","user","userRole","role","dispatch","addUser","type","Form","create","withRouter","form","history","useState","errMsg","setErrMsg","language","setLanguage","useEffect","setFieldsValue","push","getFieldDecorator","id","onSubmit","e","preventDefault","validateFields","err","values","getFieldsValue","className","autoComplete","level","style","textAlign","Item","rules","required","message","pattern","autoFocus","prefix","color","placeholder","valuePropName","initialValue","htmlType","fieldNames","selectValues","initialFormDataState","Option","Select","formItemLayout","labelCol","xs","span","sm","lg","xl","wrapperCol","dataSourceActions","ADD_TO_DATA_SOURCE","dataSourceReducer","action","dataSourceName","dataSourceData","addToDataSource","initialDataSourceState","DeliveryForm","formDataState","ownProps","addDataToFormData","value","fieldName","fieldValue","updateFieldsOfFormData","newState","updateAllFieldsOfFormData","clearFields","useReducer","dataSourceState","dispatchToDataSource","dataSourceLiveState","dispatchToDataSourceLive","window","addEventListener","handleEscDown","removeEventListener","object1","object2","Object","keys","length","entries","key","compareTwoObjects","onFieldChange","useCallback","handleSearch","arg","filter","item","startsWith","fetched","map","toString","nextPage","handleClearClick","handleSubmit","handleEnterDown","fieldId","customer","find","onKeyDown","width","maxWidth","label","dataSource","onSearch","onSelect","maxLength","onChange","display","flexFlow","justifyContent","size","onClick","Header","Layout","Content","Sider","Text","LeftMenu","logoutFromUser","changeLang","changeLanguage","collapsed","setCollapsed","handleLangChange","target","handleCollapse","minHeight","collapsible","onCollapse","theme","overflow","height","left","defaultSelectedKeys","mode","disabled","Group","Button","paddingBottom","borderRight","background","marginTop","margin","appState","combineReducers","initialState","JSON","parse","localStorage","getItem","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","path","component","exact","document","getElementById"],"mappings":"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","file":"static/js/main.8ee9c725.chunk.js","sourcesContent":["const fakeBD = {\n    customers: [\n        {\n            customerNumber: 1\n        },\n        {\n            customerNumber: 2\n        },\n        {\n            customerNumber: 3\n        },\n        {\n            customerNumber: 33,\n            phoneNumber: 89821251216,\n            deliveryCost: '2,50',\n            name: 'Дмитрий',\n            street: 'Уличная',\n            houseNumber: '16',\n            plz: '123456',\n            city: 'Москва',\n        },\n        {\n            customerNumber: 333\n        }\n    ],\n\n};\nexport const auth = (login: string, password: string) => {\n    if (login === 'test' && password === 'test') {\n        return { role: 'admin' };\n    }\n    return null;\n}\n\nexport default fakeBD;\n","import { changeLanguageType, addUserType, logoutUserType } from './actionsTypes';\n\nexport const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\nexport const ADD_USER = 'ADD_USER';\nexport const LOGOUT_USER = 'LOGOUT_USER';\n\nexport const formDataActions = {\n  ADD_TO_FORM_DATA: 'ADD_TO_FORM_DATA',\n  UPDATE_ALL_FIELDS: 'UPDATE_ALL_FIELDS',\n  CLEAR_ALL_FIELDS: 'CLEAR_ALL_FIELDS'\n};\n\nexport const changeLanguage: changeLanguageType = (lang) => ({ type: CHANGE_LANGUAGE, lang });\n\nexport const addUser: addUserType = (role, code) => ({ type: ADD_USER, role, code });\n\nexport const logoutUser: logoutUserType = () => ({ type: LOGOUT_USER });\n\nexport const addToFormData = (fieldName: string, fieldValue: string) => ({ type: formDataActions.ADD_TO_FORM_DATA, fieldName, fieldValue });\n\nexport const updateAllFieldsOfFormData = (newState: any) => ({ type: formDataActions.UPDATE_ALL_FIELDS, newState });\n\nexport const clearAllFields = () => ({ type: formDataActions.CLEAR_ALL_FIELDS });\n","import ru from './ru';\nimport de from './de';\n\nexport type langType = 'ru' | 'de';\n\nexport type langMapType = {\n  'ru': typeof ru,\n  'de': typeof de\n};\n\nexport const langMap: langMapType = {\n  'ru': ru,\n  'de': de\n};\n","const ru = {\n    authTitle: 'Авторизация',\n    organizationNumber: 'Номер организации',\n    username: 'Имя пользователя',\n    password: 'Пароль',\n    autoLogin: 'Запомнить меня',\n    login: 'Войти',\n    tableOrders: 'Tischbestellungen', //TODO: Перевод\n    selfPickUp: 'Selbstabholer', //TODO: Перевод\n    sales: 'Hausverkauf', //TODO: Перевод\n    phoneMonitor: 'Telefon monitor', //TODO: Перевод\n    customerNumber: 'Номер клиента',\n    phoneNumber: 'Номер телефона',\n    name: 'Имя',\n    street: 'Улица',\n    houseNumber: 'Номер дома',\n    plz: 'Почтовый индекс',\n    city: 'Город',\n    clientComment: 'Комментарий клиента',\n    deliveryCost: 'Стоимость доставки',\n    clear: 'Очистить',\n    goToOrder: 'Продолжить заказ',\n    logout: 'Выйти',\n    callForm: 'Доставка',\n    allOrders: 'Все заказы',\n    cookingMonitor: 'Монитор кухни',\n    carMonitor: 'Монитор доставки',\n    report: 'Отчет',\n    settings: 'Настройки',\n    help: 'Помощь'\n};\n\nexport default ru;\n","const de = {\n    authTitle: 'Restaurant-Login',\n    organizationNumber: 'Kundennumer',\n    username: 'Benutzername',\n    password: 'Passwort',\n    autoLogin: 'Automatisch Anmelden',\n    login: 'Login',\n    tableOrders: 'Tischbestellungen',\n    selfPickUp: 'Selbstabholer',\n    sales: 'Hausverkauf',\n    phoneMonitor: 'Telefon monitor',\n    customerNumber: 'Kundennummer',\n    phoneNumber: 'Telefonnumer',\n    name: 'Name',\n    street: 'Strasse',\n    houseNumber: 'Hausnummer',\n    plz: 'PLZ',\n    city: 'Stadt',\n    clientComment: 'Bemerkung',\n    deliveryCost: 'Anfahrtskosten',\n    clear: 'Löschen',\n    goToOrder: 'Bestellung',\n    logout: 'Logout',\n    callForm: 'Lieferdienst',\n    allOrders: 'Alle Bestellungen',\n    cookingMonitor: 'Kuchen monitor',\n    carMonitor: 'Fahrer monitor',\n    report: 'Berichten',\n    settings: 'Einstellungen',\n    help: 'Hilfe'\n};\n\nexport default de;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Icon, Input, Button, Checkbox, Typography, Alert } from 'antd';\nimport { connect, MapDispatchToPropsFunction, MapStateToProps } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\n\nimport './Auth.css';\n\nimport { auth } from '../../fakeBD';\n\nimport { addUser } from '../../redux/actions';\n\nimport { LoginFormProps, LoginFormOwnProps, LoginFormDispatchProps, LoginFormStateProps, LoginFormValues } from './types';\nimport { State } from '../../redux/types';\n\nimport { langMap } from '../../lang';\nimport { FormComponentProps } from 'antd/es/form';\n\nimport { ROOT_URL } from '../../constants/rootUrl';\n\nconst { Title } = Typography;\n\nexport const LoginForm = ({ form, history, lang, addUser, code, userRole }: LoginFormProps) => {\n  const [errMsg, setErrMsg] = useState('');\n  const [language, setLanguage] = useState(langMap[lang]);\n\n  useEffect(() => form.setFieldsValue({ code }), []);\n\n  useEffect(() => {\n    if (userRole) {\n      history.push(`${ROOT_URL}/menu`);\n    }\n  }, [userRole]);\n\n  useEffect(() => {\n    setLanguage(langMap[lang]);\n  }, [lang]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    form.validateFields((err: any, values: LoginFormValues) => {\n      const user = auth(values.username, values.password);\n      if (!err && user) {\n        addUser(user.role, form.getFieldsValue().code);\n        history.push(`${ROOT_URL}/menu`);\n      } else if (!user) {\n        setErrMsg('Вы неверно ввели логин или пароль');\n      }\n    });\n  };\n\n    const { getFieldDecorator } = form;\n    return (\n        <div id=\"components-form-demo-normal-login\">\n        <Form onSubmit={handleSubmit} className=\"login-form\" autoComplete=\"off\">\n            <Title level={4} style={{textAlign: 'center'}}>{language.authTitle}</Title>\n            <Form.Item>\n            {getFieldDecorator('code', {\n                rules: [\n                  { required: true, message: 'Введите код' },\n                { pattern: /[0-9]+/, message: 'Разрешены только цифры'}\n              ],\n            })(\n                <Input\n                \n                autoFocus\n                autoComplete=\"off\"\n                prefix={<Icon type=\"number\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                placeholder={language.organizationNumber}\n                />\n            )}\n            </Form.Item>\n            <Form.Item>\n            {getFieldDecorator('username', {\n                rules: [{ required: true, message: 'Введите имя пользователя' }],\n            })(\n                <Input\n                autoComplete=\"off\"\n                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                placeholder={language.username}\n                />,\n            )}\n            </Form.Item>\n            <Form.Item>\n            {getFieldDecorator('password', {\n                rules: [{ required: true, message: 'Введите пароль' }],\n            })(\n                <Input\n                autoComplete=\"off\"\n                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                type=\"password\"\n                placeholder={language.password}\n                />,\n            )}\n            </Form.Item>\n            <Form.Item>\n            {getFieldDecorator('remember', {\n                valuePropName: 'checked',\n                initialValue: true,\n            })(<Checkbox>{language.autoLogin}</Checkbox>)}\n            {errMsg && <div>\n                <Alert type=\"error\" message={errMsg}/>\n            </div>}\n            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                {language.login}\n            </Button>\n            </Form.Item>\n        </Form>\n      </div>\n    );\n}\n\nconst mapStatetoProps: MapStateToProps<LoginFormStateProps, LoginFormOwnProps, State> = (state) => {\n  return {\n    lang: state.languages.lang,\n    code: state.user.code,\n    userRole: state.user.role\n  }\n};\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<LoginFormDispatchProps, LoginFormOwnProps> = (dispatch) => {\n  return {\n    addUser(role: string, code: string) {\n      dispatch(addUser(role, code));\n    }\n  }\n};\n\nexport const Auth = connect(mapStatetoProps, mapDispatchToProps)(Form.create<FormComponentProps<LoginFormOwnProps>>({ name: 'normal_login' })(withRouter<RouteComponentProps<LoginFormOwnProps & LoginFormDispatchProps & LoginFormStateProps, any, any>, any>(LoginForm)));\n","export const ROOT_URL = '';\n","const fieldNames: fieldNamesInterface = {\n  customerNumber: 'customerNumber',\n  phoneNumber: 'phoneNumber',\n  name: 'name',\n  street: 'street',\n  houseNumber: 'houseNumber',\n  plz: 'plz',\n  city: 'city',\n  clientComment: 'clientComment',\n  deliveryCost: 'deliveryCost',\n};\n\nexport interface fieldNamesInterface {\n  customerNumber: string,\n  phoneNumber: string,\n  name: string,\n  street: string,\n  houseNumber: string,\n  plz: string,\n  city: string,\n  clientComment: string,\n  deliveryCost: string,\n};\n\nexport default fieldNames;\n","export const selectValues = ['0,00', '0,50', '1,00', '1,50', '2,00', '2,50', '3,00'];\n","import { CHANGE_LANGUAGE, ADD_USER, LOGOUT_USER, formDataActions } from './actions';\n\nimport fieldNames from '../constants/fieldNames';\nimport { selectValues } from '../constants/selectValues';\n\nimport {\n  LanguagesState,\n  LanguageAction,\n  UserState,\n  UserAction,\n  FormDataStateType,\n  FormDataStateAction\n} from './reducersTypes';\n\nexport const languages = (state: LanguagesState = { lang: 'ru' }, action: LanguageAction) => {\n    switch (action.type) {\n        case CHANGE_LANGUAGE: {\n            return { lang: action.lang };\n        };\n        default: return state;\n    }\n};\n\nexport const user = (state: UserState = { role: '', code: '' }, action: UserAction) => {\n    switch (action.type) {\n        case ADD_USER: {\n            const { role, code } = action;\n            return { role, code };\n        };\n        case LOGOUT_USER: {\n            return {\n                ...state,\n                role: ''\n            };\n        }\n        default: return state;\n    }\n};\n\nexport const initialFormDataState: any = {//TODO: add types\n    [fieldNames.customerNumber]: '',\n    [fieldNames.phoneNumber]: '',\n    [fieldNames.customerNumber]: '',\n    [fieldNames.phoneNumber]: '',\n    [fieldNames.name]: '',\n    [fieldNames.street]: '',\n    [fieldNames.houseNumber]: '',\n    [fieldNames.plz]: '',\n    [fieldNames.city]: '',\n    [fieldNames.clientComment]: '',\n    [fieldNames.deliveryCost]: selectValues[0]\n  };\n  \nexport const formDataState = (state: FormDataStateType = initialFormDataState, action: FormDataStateAction) => {\n    switch (action.type) {\n      case formDataActions.ADD_TO_FORM_DATA: {\n        return {\n          ...state,\n          [action.fieldName]: action.fieldValue\n        };\n      };\n      case formDataActions.UPDATE_ALL_FIELDS: {\n        const newState = { ...state };\n        for (let [key, value] of Object.entries(action.newState)) {\n          newState[key] = value;\n        };\n        return newState;\n      };\n      case formDataActions.CLEAR_ALL_FIELDS: {\n        return {...initialFormDataState};\n      };\n      default:\n        return state;\n    };\n  };\n","import React, { useReducer, useEffect, useCallback, useState } from 'react';\nimport { Button, Form, Input, AutoComplete, Select, Divider, Card } from 'antd';\n\nimport { withRouter } from 'react-router-dom';\nimport { connect, MapDispatchToPropsNonObject, MapStateToPropsParam } from 'react-redux';\n\n//types\nimport { DeliveryFormProps } from './DeliveryFormTypes';\nimport { langType } from '../../lang';\n\nimport fakeBD from '../../fakeBD';\nimport { langMap } from '../../lang';\n\nimport fieldNames from '../../constants/fieldNames';\nimport { selectValues } from '../../constants/selectValues';\n\nimport { initialFormDataState } from '../../redux/reducers';\nimport { formDataActions, addToFormData, updateAllFieldsOfFormData, clearAllFields } from '../../redux/actions';\nimport { Action } from 'redux';\n\nimport { ROOT_URL } from '../../constants/rootUrl';\n\nconst { Option } = Select;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 12 },\n    lg: { span: 12 },\n    xl: { span: 12 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 12 },\n    lg: { span: 12 },\n    xl: { span: 12 }\n  },\n};\n\nconst dataSourceActions = {\n  ADD_TO_DATA_SOURCE: 'ADD_TO_DATA_SOURCE'\n};\n\ntype dataSourceReducerTypes = typeof dataSourceActions.ADD_TO_DATA_SOURCE;\ninterface dataSourceReducerAction extends Action<dataSourceReducerTypes> {\n  dataSourceName: string;\n  dataSourceData: string[];\n};\n\nfunction dataSourceReducer(state: any, action: dataSourceReducerAction) {//FIXME\n  switch (action.type) {\n    case dataSourceActions.ADD_TO_DATA_SOURCE: {\n      return {\n        ...state,\n        [action.dataSourceName]: action.dataSourceData\n      }\n    }\n  }\n};\n\n\nconst addToDataSource = (dataSourceName: string, dataSourceData: string[]) => ({ type: dataSourceActions.ADD_TO_DATA_SOURCE, dataSourceName, dataSourceData });\n\n\n\nconst initialDataSourceState: any = {//TODO: add types\n  [fieldNames.customerNumber]: [],\n  [fieldNames.phoneNumber]: [],\n  [fieldNames.customerNumber]: [],\n  [fieldNames.phoneNumber]: [],\n  [fieldNames.name]: [],\n  [fieldNames.street]: [],\n  [fieldNames.houseNumber]: [],\n  [fieldNames.plz]: [],\n  [fieldNames.city]: [],\n  [fieldNames.clientComment]: [],\n  [fieldNames.deliveryCost]: []\n};\n\nconst tryToFetchUser = (fieldId: string, fieldValue: string) => fakeBD.customers.find((customer: any) => customer[fieldId] == fieldValue);\n\nconst compareTwoObjects = (object1: any, object2: any) => {\n  if (Object.keys(object1).length !== Object.keys(object2).length)\n    return false;\n  for (let [key, value] of Object.entries(object1)) {\n    if (object2[key] !== value)\n      return false;\n  };\n  return true;\n}\n\n\nconst mapDispatchToProps: MapDispatchToPropsNonObject<any, any> = (dispatch, ownProps) => ({\n  addDataToFormData(id: string, value: string) {\n    dispatch(addToFormData(id, value))\n  },\n  updateFieldsOfFormData(newState: any) {\n    dispatch(updateAllFieldsOfFormData(newState));\n  },\n  clearFields() {\n    dispatch(clearAllFields());\n  }\n});\n\nconst mapStateToProps: MapStateToPropsParam<any, any, any> = (state) => ({ formDataState: state.formDataState, lang: state.languages.lang });\n\nconst DeliveryForm = Form.create<DeliveryFormProps>(\n  { name: 'delivery_form' }\n  )(connect(mapStateToProps, mapDispatchToProps)(withRouter((\n    { lang, formDataState, addDataToFormData, clearFields, updateFieldsOfFormData, form: { getFieldDecorator, setFieldsValue, getFieldsValue }, form, history }: any) => {\n\n  const [dataSourceState, dispatchToDataSource] = useReducer(dataSourceReducer, initialDataSourceState);\n  const [dataSourceLiveState, dispatchToDataSourceLive] = useReducer(dataSourceReducer, initialDataSourceState);\n  const [language, setLanguage] = useState(langMap[lang as langType]);\n\n  useEffect(() => {\n    setLanguage(langMap[lang as langType]);\n  }, [lang]);\n  useEffect(() => {\n    window.addEventListener('keydown', handleEscDown);\n    return () => window.removeEventListener('keydown', handleEscDown);\n  }, []);\n\n  useEffect(() => {\n    if (compareTwoObjects(getFieldsValue(), formDataState))\n      return;\n    setFieldsValue(formDataState);\n  }, [formDataState, setFieldsValue, getFieldsValue]);\n\n  const onFieldChange = useCallback((id: string, value: string) => {\n    addDataToFormData(id, value);\n  }, [addDataToFormData]);\n\n  const handleSearch = useCallback((arg: string, id: string) => {\n    updateFieldsOfFormData(getFieldsValue());\n    if (!dataSourceState[id].length) {\n      const fetched = fakeBD.customers.map(({ [id]: value } : any) => value && value.toString());\n      dispatchToDataSource(addToDataSource(id, fetched));//TODO: add types\n      dispatchToDataSourceLive(addToDataSource(id, fetched.filter((item: string) => item && item.startsWith(arg))));\n    } else {\n      dispatchToDataSourceLive(addToDataSource(id, dataSourceState[id].filter((item: string) => item && item.startsWith(arg))));\n    }\n  }, [updateFieldsOfFormData, getFieldsValue, dataSourceState, dispatchToDataSource, dispatchToDataSourceLive]);\n\n  const nextPage = useCallback(() => {\n    form.validateFields((err: any) => {\n      if (!err) {\n        history.push(`${ROOT_URL}/finish`);\n      }\n    });\n  }, [form, history]);\n\n  const handleClearClick = useCallback(() => {\n    setFieldsValue(initialFormDataState);\n    clearFields();\n  }, [setFieldsValue, clearFields]);\n\n  const handleSubmit = useCallback((e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    nextPage();\n  }, [nextPage]);\n\n  const handleEscDown = useCallback((e: any) => {\n    if (e.key === 'Escape') {\n      handleClearClick();\n    } else if (e.key === 'F2') {\n      nextPage();\n    }\n  }, [handleClearClick, nextPage]);\n\n  const handleEnterDown = useCallback((id: string, value: string) => {\n    const customer = tryToFetchUser(id, value);\n    if (customer) {\n      setFieldsValue(customer);\n      updateFieldsOfFormData(customer);\n    }\n  }, [setFieldsValue, updateFieldsOfFormData]);\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit} onKeyDown={handleEscDown}  {...formItemLayout}>\n        <Card style={{ width: '60%', maxWidth: '500px'}}>\n        <Form.Item label={language.customerNumber}>\n          {getFieldDecorator(fieldNames.customerNumber, {\n            rules: [\n              { required: true, message: 'Введите номер клиента' },\n              { pattern: /[0-9]+/, message: 'Разрешены только цифры' }\n            ]\n          })(\n            <AutoComplete\n              dataSource={dataSourceLiveState[fieldNames.customerNumber]}\n              onSearch={(arg) => handleSearch(arg, fieldNames.customerNumber)}\n              onSelect={(value) => handleEnterDown(fieldNames.customerNumber, value as string)}\n            >\n              <Input onKeyDown={handleEscDown} maxLength={6} id={fieldNames.customerNumber} />\n            </AutoComplete>)}\n        </Form.Item>\n        <Form.Item label={language.phoneNumber}>\n          {getFieldDecorator(fieldNames.phoneNumber, {\n            rules: [\n              { required: true, message: 'Введите номер телефона клиента' },\n              { pattern: /[0-9]+/, message: 'Разрешены только цифры' }\n            ]\n          })(\n            <AutoComplete\n              dataSource={dataSourceLiveState[fieldNames.phoneNumber]}\n              onSearch={(arg) => handleSearch(arg, fieldNames.phoneNumber)}\n              onSelect={(value) => handleEnterDown(fieldNames.phoneNumber, value as string)}\n            >\n              <Input onKeyDown={handleEscDown} autoFocus={true} maxLength={15} id={fieldNames.phoneNumber} />\n            </AutoComplete>)}\n        </Form.Item>\n        <Form.Item label={language.name}>\n          {getFieldDecorator(fieldNames.name, {\n            rules: [\n              { required: true, message: 'Введите имя клиента' }\n            ]\n          })(\n            <AutoComplete\n              dataSource={dataSourceLiveState[fieldNames.name]}\n              onSearch={(arg) => handleSearch(arg, fieldNames.name)}\n              onSelect={(value) => handleEnterDown(fieldNames.name, value as string)}\n            >\n              <Input onKeyDown={handleEscDown}  maxLength={30} id={fieldNames.name} />\n            </AutoComplete>)}\n        </Form.Item>\n        <Form.Item label={language.city}>\n          {getFieldDecorator(fieldNames.city, {\n            rules: [\n              { required: true, message: 'Введите название города' }\n            ]\n          })(<Input onKeyDown={handleEscDown}  maxLength={25} id={fieldNames.city} />)}\n        </Form.Item>\n        <Form.Item label={language.street}>\n          {getFieldDecorator(fieldNames.street, {\n            rules: [\n              { required: true, message: 'Введите название улицы' }\n            ]\n          })(<Input onKeyDown={handleEscDown}  maxLength={30} id={fieldNames.street} />)}\n        </Form.Item>\n        <Form.Item label={language.houseNumber}>\n          {getFieldDecorator(fieldNames.houseNumber, {\n            rules: [\n              { required: true, message: 'Введите номер дома' },\n              { pattern: /[0-9]+/, message: 'Разрешены только цифры' }\n            ]\n          })(<Input onKeyDown={handleEscDown}  maxLength={6} id={fieldNames.houseNumber} />)}\n        </Form.Item>\n        <Form.Item label={language.plz}>\n          {getFieldDecorator(fieldNames.plz, {\n            rules: [\n              { required: true, message: 'Введите почтовый индекс' },\n              { pattern: /[0-9]+/, message: 'Разрешены только цифры' }\n            ]\n          })(<Input onKeyDown={handleEscDown}  maxLength={6} id={fieldNames.plz} />)}\n        </Form.Item>\n        <Form.Item label={language.clientComment}>\n        {getFieldDecorator(fieldNames.clientComment)(\n          <Input onKeyDown={handleEscDown}  maxLength={35} id={fieldNames.clientComment} />)}\n        </Form.Item>\n        <Form.Item label={language.deliveryCost}>\n        {getFieldDecorator(fieldNames.deliveryCost)(\n          <Select onChange={(value: string) => onFieldChange(fieldNames.deliveryCost, value)} id={fieldNames.deliveryCost}>\n            {selectValues.map(value => <Option key={value} value={value}>{value}</Option>)}\n          </Select>)}\n        </Form.Item>\n      </Card>\n      <Divider/>\n      <div style={{ display: 'flex', flexFlow: 'row nowrap', justifyContent: 'space-between' }}>\n        <Button type=\"danger\" size=\"large\" onClick={handleClearClick}>{language.clear} / ESC</Button>\n        <Form.Item>\n          <Button htmlType=\"submit\" type=\"primary\" size=\"large\">{language.goToOrder} / F2</Button>\n        </Form.Item>\n      </div>\n      </Form>\n    </div>\n  )\n})));\n\nexport default DeliveryForm;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Menu, Icon, Layout, Typography, Button, Divider, Radio } from 'antd';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport { withRouter } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\nimport { connect, MapStateToProps, MapDispatchToPropsFunction } from 'react-redux';\n\nimport './Menu.css';\n\nimport { langMap } from '../../lang';\nimport { logoutUser, changeLanguage } from '../../redux/actions';\n\n\nimport DeliveryForm from '../DeliveryForm';\n\nimport { State } from '../../redux/types';\nimport { MenuPageProps, MenuPageStateProps, MenuPageDispatchProps, MenuPageOwnProps } from './types';\nimport { ClickParam } from 'antd/lib/menu';\n\nimport { ROOT_URL } from '../../constants/rootUrl';\n\nconst { Header, Content, Sider } = Layout;\nconst { Text } = Typography;\n\n\n\nconst MenuPage = ({ lang, userRole, logoutFromUser, changeLang, history }: MenuPageProps) => {\n  const [language, setLanguage] = useState(langMap[lang]);\n  const [collapsed, setCollapsed] = useState(false);\n\n  useEffect(() => {\n    setLanguage(langMap[lang]);\n  }, [lang, setLanguage]);\n\n  useEffect(() => {\n    setLanguage(langMap[lang]);\n  }, [lang]);\n\n  const logout = useCallback((e: ClickParam) => {\n    logoutFromUser();\n    history.push(`${ROOT_URL}/`);\n  }, [logoutFromUser, history]);\n\n  const handleLangChange = useCallback((e: RadioChangeEvent) => {\n    const { target: { value } } = e;\n    changeLang(value);\n  }, [changeLang]);\n\n  const handleCollapse = useCallback((collapsed: boolean) => {\n    setCollapsed(collapsed);\n  }, [setCollapsed]);\n\n  return (\n    <Layout style={{ minHeight: '100vh'}}>\n      <Sider collapsible onCollapse={handleCollapse} theme=\"light\" style={{\n      overflow: 'auto',\n      height: '100vh',\n      left: 0,\n    }}>\n        <div className=\"menu\">\n          <Menu style={{height: '100vh'}} defaultSelectedKeys={['2']} mode=\"inline\">\n            <Menu.Item disabled>\n              <Icon type=\"tag\" />\n              {!collapsed && <Radio.Group value={lang} onChange={handleLangChange}>\n                <Radio.Button value=\"ru\">ru</Radio.Button>\n                <Radio.Button value=\"de\">de</Radio.Button>\n              </Radio.Group>}\n            </Menu.Item>\n            <Menu.Item key=\"1\" onClick={logout} className=\"logout-button\">\n              <Icon type=\"logout\" />\n              <span>{language.logout}</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"phone\" />\n              <span>{language.callForm}</span>\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <Icon type=\"shopping-cart\" />\n              <span>{language.allOrders}</span>\n            </Menu.Item>\n            <Menu.Item key=\"4\">\n              <Icon type=\"dashboard\" />\n              <span>{language.cookingMonitor}</span>\n            </Menu.Item>\n            <Menu.Item key=\"5\">\n              <Icon type=\"car\" />\n              <span>{language.carMonitor}</span>\n            </Menu.Item>\n            <Menu.Item key=\"6\">\n              <Icon type=\"bar-chart\" />\n              <span>{language.report}</span>\n            </Menu.Item>\n            <Menu.Item key=\"7\">\n              <Icon type=\"setting\" />\n              <span>{language.settings}</span>\n            </Menu.Item>\n            <Menu.Item key=\"8\">\n              <Icon type=\"question-circle\" />\n              <span>{language.help}</span>\n            </Menu.Item>\n          </Menu>\n          <Text style={{ textAlign: 'center', paddingBottom: '20px', borderRight: '1px solid #e8e8e8' }}>{userRole}</Text>\n        </div>\n      </Sider>\n      <Layout>\n        <Header style={{ background: '#fff', marginTop: '24px', height: 'auto', display: 'flex', flexFlow: 'row nowrap', justifyContent: 'space-around' }}>\n          <Button type=\"dashed\" size=\"large\">{language.tableOrders}</Button>\n          <Button type=\"dashed\" size=\"large\">{language.selfPickUp}</Button>\n          <Button type=\"dashed\" size=\"large\">{language.sales}</Button>\n          <Button type=\"dashed\" size=\"large\">{language.phoneMonitor}</Button>\n        </Header>\n        <Divider/>\n        <Content style={{ margin: '0 16px', background: 'inherit'  }}>\n          <DeliveryForm />\n        </Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nconst mapStatetoProps: MapStateToProps<MenuPageStateProps, MenuPageOwnProps, State> = (state) => {\n  return {\n    formDataState: state.formDataState,\n    lang: state.languages.lang,\n    userRole: state.user.role\n  }\n};\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<MenuPageDispatchProps, MenuPageOwnProps> = (dispatch) => ({ \n  logoutFromUser() {\n    dispatch(logoutUser());\n  },\n  changeLang(lang: 'ru' | 'de') {\n    dispatch(changeLanguage(lang));\n  }\n});\n\nexport const LeftMenu = connect(\n  mapStatetoProps,\n  mapDispatchToProps\n)(withRouter<RouteComponentProps<MenuPageDispatchProps & MenuPageOwnProps & MenuPageStateProps>, any>(MenuPage));//FIXME\n","import { combineReducers, createStore } from 'redux';\nimport { languages, user, formDataState } from './reducers';\n\nexport const appState = combineReducers({ languages, user, formDataState });\nconst initialState = JSON.parse(localStorage.getItem('pizza-redux') as string);\nlet store = initialState ? createStore(appState, initialState) : createStore(appState);\n\nstore.subscribe(() => localStorage.setItem('pizza-redux', JSON.stringify(store.getState())));\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\n\nimport './index.css';\n\nimport { Auth } from './components/Auth';\nimport { LeftMenu } from './components/LeftMenu';\n\nimport store from './redux';\n\nimport { ROOT_URL } from './constants/rootUrl';\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <Route path={`${ROOT_URL}/menu`} component={LeftMenu}/>\n      <Route path={`${ROOT_URL}/index.html`} exact component={Auth}/>\n      <Route path={`${ROOT_URL}/`} exact component={Auth}/>\n      <Route path={`${ROOT_URL}/finish`} render={() => <div>DONE</div>}/>\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}